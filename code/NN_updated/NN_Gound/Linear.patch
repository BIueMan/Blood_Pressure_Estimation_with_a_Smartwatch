--- /usr/local/lib/python3.5/dist-packages/torch/nn/modules/linear.py
+++ /usr/local/lib/python3.5/dist-packages/torch/nn/modules/linear.py
@@ -4,14 +4,14 @@
     Args:
         in_features: size of each input sample
         out_features: size of each output sample
-        bias: If set to ``False``, the layer will not learn an additive bias.
+        bias: If set to False, the layer will not learn an additive bias.
             Default: ``True``
 
     Shape:
-        - Input: :math:`(N, *, H_{in})` where :math:`*` means any number of
-          additional dimensions and :math:`H_{in} = \text{in\_features}`
-        - Output: :math:`(N, *, H_{out})` where all but the last dimension
-          are the same shape as the input and :math:`H_{out} = \text{out\_features}`.
+        - Input: :math:`(N, *, \text{in\_features})` where :math:`*` means any number of
+          additional dimensions
+        - Output: :math:`(N, *, \text{out\_features})` where all but the last dimension
+          are the same shape as the input.
 
     Attributes:
         weight: the learnable weights of the module of shape
@@ -31,7 +31,7 @@
         >>> print(output.size())
         torch.Size([128, 30])
     """
-    __constants__ = ['in_features', 'out_features']
+    __constants__ = ['bias']
 
     def __init__(self, in_features, out_features, bias=True):
         super(Linear, self).__init__()
@@ -51,6 +51,7 @@
             bound = 1 / math.sqrt(fan_in)
             init.uniform_(self.bias, -bound, bound)
 
+    @weak_script_method
     def forward(self, input):
         return F.linear(input, self.weight, self.bias)
 